package com.wellness.DaoImpl;

import java.util.List;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import com.wellness.Dao.WellnessDao;
import com.wellness.Repository.HibernateUtil;
import com.wellness.model.UserLogin;

@Repository
public class WellnessDaoImpl implements WellnessDao{

	@Autowired
	DataSource dataSource;
	public WellnessDaoImpl() {
    	System.out.println("WellnessDaoImpl");
    }
	
	@Autowired
    private HibernateUtil hibernateUtil;


	@Override
	public boolean findUser(String email) {
		JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);
    	String sql = "select emailAddress from wellness.users where emailAddress = ? ";
        
        try {
        	jdbcTemplate.queryForObject(sql, String.class, email);
        	System.out.println("true" );
            return true;
        } catch (EmptyResultDataAccessException e) {
        	System.out.println("false");
            return false;
        }
	}

	
	@Override
	public long createUser(UserLogin userLogin) {
		return (Long) hibernateUtil.create(userLogin);
	}

	@Override
	public UserLogin updateUser(UserLogin userLogin) {
		return hibernateUtil.update(userLogin);
		}

	@Override
	public void deleteUserById(long id) {
		UserLogin userLogin = new UserLogin();
		userLogin.setId(id);
        hibernateUtil.delete(userLogin);
		
	}

	@Override
	public List<UserLogin> getAllusers() {
		return hibernateUtil.fetchAll(UserLogin.class);
	}

	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Override
	public UserLogin getUserByEmailId(String email){
		String sql = "SELECT * FROM wellness.users where emailAddress= ?";
     JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);
     UserLogin userLogin = (UserLogin) jdbcTemplate.queryForObject(
     sql, new Object[] { email }, new BeanPropertyRowMapper(UserLogin.class));
     return userLogin;
	}


	@Override
	public UserLogin getUserById(long id) {
		UserLogin userLogin = new UserLogin();
		userLogin.setId(id);
		return hibernateUtil.fetchById(id, UserLogin.class);
	}


	@Override
	public void updaterole(UserLogin userLogin, String role, long id) {    	
    	String UpdateSql = "UPDATE users SET roles=? where id=? ";    	
  	     JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);
		  	  jdbcTemplate.update(
		  			UpdateSql,
		  			new Object[] { 		   
		  					    userLogin.getRoles(), 
		  					    userLogin.getId()
		  					  
		  						});  
		  	
		  	
  	  }


	   


	@Override
	 public void passReset(UserLogin userLogin, String pass, String email) {    	
    	String UpdateSql = "UPDATE users SET password=? where emailAddress=? ";    	
  	     JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);
		  	  jdbcTemplate.update(
		  			UpdateSql,
		  			new Object[] { 		   
		  					    userLogin.getPassword(), 
		  					    userLogin.getEmailAddress()
		  					  
		  						});  
		  	
		  	
  	  }


	@Override
	public void updateSubscription(UserLogin userLogin, String membership, long id) {    	
    	String UpdateSql = "UPDATE users SET subscription=? where id=? ";    	
  	     JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);
		  	  jdbcTemplate.update(
		  			UpdateSql,
		  			new Object[] { 		   
		  					    userLogin.getSubscription(), 
		  					    userLogin.getId()
		  					  
		  						});  
		  	
		  	
  	  }


	@Override
	@SuppressWarnings("rawtypes")
	public List<UserLogin> lookupMembers(String name) {
		JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);        	
       	final String sql  = "SELECT m.* FROM wellness.users m WHERE m.lname like '%"+ name +"%'";
       	@SuppressWarnings("unchecked")
   		List<UserLogin> memberList = jdbcTemplate.query(sql, new BeanPropertyRowMapper( UserLogin.class ));						
   		return memberList;
   		 
	}


	


	@Override
	public void updateUserById(UserLogin userLogin, long id) {

		String UpdateSql = "UPDATE users SET address=?, age=?, card=?, city=?, emailAddress=?, fname=?,"
		         + " lname=?, state=?, tel=?, zip=?, subscription=? where id=? ";    	
	     JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);
	  	  jdbcTemplate.update(
	  			UpdateSql,
	  			new Object[] { 
	  					userLogin.getAddress(),
	  					userLogin.getAge(),
	  					userLogin.getCard(),
	  					userLogin.getCity(),
	  					userLogin.getEmailAddress(),
	  					userLogin.getFname(),
	  					userLogin.getLname(),
	  					userLogin.getState(),
	  					userLogin.getTel(),
	  					userLogin.getZip(),
	  					userLogin.getSubscription(),
	  					userLogin.getId()
	  					
	  					}); 	  			
	     }


	
		@Override
		 @SuppressWarnings("rawtypes")
			public List<UserLogin> lookupCity(String cityorZip) {
				JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);        	
		       	final String sql  = "SELECT m.* FROM wellness.users m WHERE m.city like '%"+ cityorZip +"%'"
		       			+ " UNION " 
		       			+ "SELECT m.* FROM wellness.users m WHERE m.zip like '%"+ cityorZip +"%'";
		       	@SuppressWarnings("unchecked")
		   		List<UserLogin> memberList = jdbcTemplate.query(sql, new BeanPropertyRowMapper( UserLogin.class ));						
		   		return memberList;
			}
	
}
